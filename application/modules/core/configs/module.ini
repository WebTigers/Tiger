[production]

;  These configs will appear automagically the core admin control panel
;  |    The name of your module
;  |    |    The name of the tab this config will appear under (will be translated for the tab name)
;  |    |    |   The config tab's heading name (will be translated for the heading name)
;  |    |    |   |   The config param key
;  |    |    |   |   |    The default value
;  ↓    ↓    ↓   ↓   ↓    ↓
module.core.AWS.S3.key = ""
module.core.AWS.S3.key = ""
module.core.aws.S3.description = "MODULE.CONFIG.TRANSLATION_KEY"


;; Form Configuration ;;

; Base Form Config ;
modules.core.forms.aws_s3.name = "Core_Form_AwsS3"
modules.core.forms.aws_s3.attribs.id = "AwsS3"
modules.core.forms.aws_s3.attribs.class = "novalidate"
; modules.core.forms.aws_s3.disableTranslator = 0       ; Default is 0 / false
; modules.core.forms.aws_s3.action = "/user/register"   ; Unused but left in for reference
; modules.core.forms.aws_s3.method = "post"             ; Unused but left in for reference
; attribs.onclick = "validate(this)"                    ; Unused but left in for reference

; Uncomment these if you have any custom form, element or validation paths ;
; modules.core.forms.aws_s3.prefixPath.element.prefix = "My_Element"
; modules.core.forms.aws_s3.prefixPath.element.path = "My/Element/"
; modules.core.forms.aws_s3.elementPrefixPath.validate.prefix = "My_Validate"
; modules.core.forms.aws_s3.elementPrefixPath.validate.path = "My/Validate/"
; modules.core.forms.aws_s3.displayGroupPrefixPath.prefix = "My_Group"
; modules.core.forms.aws_s3.displayGroupPrefixPath.path = "My/Group/"

modules.core.forms.aws_s3.elements.username.type = "text"
modules.core.forms.aws_s3.elements.username.options.label = "Username"
modules.core.forms.aws_s3.elements.username.options.validators.alpha.validator = "Alpha"
modules.core.forms.aws_s3.elements.username.options.filters.lcase = "StringToLower"
; more elements, of course...

elementFilters.trim = "StringTrim"
; elementDecorators.trim = "StringTrim"

; displayGroups.login.elements.username = "username"
; displayGroups.login.elements.password = "password"
; displayGroupDecorators.elements.decorator = "FormElements"
; displayGroupDecorators.fieldset.decorator = "Fieldset"

decorators.elements.decorator = "FormElements"
decorators.fieldset.decorator = "FieldSet"
decorators.fieldset.decorator.options.class = "zend_form"
decorators.form.decorator = "Form"


;; Common Form Elements ;;

; Base Element Options ;
element.name = "foo"
element.value = "foobar"
element.label = "Foo:"
element.order = 10
element.required = true
element.allowEmpty = false
element.autoInsertNotEmptyValidator = true
element.description = "Foo elements are for examples"
element.ignore = false

element.attribs.id = "foo"
element.attribs.class = "element"

; For radio button elements
;element.escape = true
;element.listsep = "<br />\n"
; sets 'onclick' attribute
;element.onclick = "autoComplete(this, '/form/autocomplete/element')"

element.prefixPaths.decorator.prefix = "My_Decorator"
element.prefixPaths.decorator.path = "My/Decorator/"
element.disableTranslator = 0

element.validators.required.validator = "NotEmpty"
element.validators.required.breakChainOnFailure = true
element.validators.alpha.validator = "alpha"
element.validators.regex.validator = "regex"
element.validators.regex.options.pattern = "/^[A-F].*/$"

element.filters.ucase.filter = "StringToUpper"

element.decorators.element.decorator = "ViewHelper"
element.decorators.element.options.helper = "FormText"
element.decorators.label.decorator = "Label"



;; Common Validators ;;

; NotEmpty ;
;element.validators.notempty.validator = "NotEmpty"
;element.validators.notempty.breakChainOnFailure = true

; Alnum ;
;element.validators.alnum.validator = "Alnum"
;element.validators.alnum.breakChainOnFailure = true

; StringLength ;
;element.validators.strlen.validator = "StringLength"
;element.validators.strlen.options.min = 6
;element.validators.strlen.options.max = 20
;element.validators.strlen.breakChainOnFailure = true

; Regex ;
;element.validators.regex.validator = "Regex"
;element.validators.regex.options.pattern = "/^[A-F].*/$"
;element.validators.regex.breakChainOnFailure = true

;; Common Filters ;;

; StringToUpper ;
;element.filters.ucase.filter = "StringToUpper"





[staging : production]


[testing : production]


[development : production]
